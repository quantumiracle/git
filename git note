git add  #unstaged(untracked)->staged
git add .  #add all files in this path, notes the space before .
git commit -m "change1 1.py"    #only commit could be rememberd by log and reflog, or say recoverd
git diff #compare unstaged and last commit
git diff --cached #compared staged and last commit
git diff HEAD #staged & unstaged
git status (-s)
git log
git reflog #check recent commit/reset changes, each with unique commit ID, using 'git reset --hard ID'could recover to any one committed
git reset --hard HEAD  #check where is HEAD now
git reset --hard HEAD  #let HEAD move to last commit
git reset --hard ID  #let HEAD move to the commit ID
git log (--oneline)  #check all commit happened before the HEAD
git commit --amend --no-edit   # "--no-edit": 不编辑, 直接合并到上一个 commit
git branch branchname   #create branch
git branch  #check all branch
git checkout branchname  #convert HEAD to another branch
git chechout -b branchname #create + convert
git commit -am "change 3 in dev"  # "-am": add 所有改变 并直接 commit
只有commit的版本才能被恢复或前往，add的或unstaged都会在切换中丢失
在另一分支中修改并add,commit不会修改掉其他分支(master),尽管是同一文件目录下，只有切回master分支并用git merge another_branchname才会将master更新为分支的， 该操作fast forward不会在log中有commit信息，用git merge --no-ff -m "some signal" branchname才会有commit记录
有了分支结构，文件修改就不是原来根据位置修改了，而是虚拟的根据分支修改，不同分支下文件内容是不一样的！！


git stash #暂存,注意是存在某分支上，而不是跨分支的，故后面要到该分支下pop再用
git stash list 
git stash pop

git remote add origin https://github.com/quantumiracle/git.git
git push -u origin master     # 推送本地 master 去 origin
git push -u origin dev        # 推送本地 dev  去 origin



